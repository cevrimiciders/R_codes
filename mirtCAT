
library(mirtCAT)
options(stringsAsFactors = FALSE)

# define population IRT parameters
set.seed(1234)
nitems <- 100
itemnames <- paste0("Item.", 1:nitems)
a <- matrix(c(rlnorm(nitems/2, 0.2, 0.3), numeric(nitems), rlnorm(nitems/2, 0.2, 0.3)), nitems)

head(a) #first 6

d <- matrix(rnorm(nitems))
pars <- data.frame(a, d)
colnames(pars) <- c("a1", "a2", "d")
trait_cov <- matrix(c(1, 0.5, 0.5, 1), 2, 2)

# create mirt_object
mod <- generate.mirt_object(pars, itemtype = "2PL", latent_covariance = trait_cov)

# math items definitions addition for one factor and multiplication for the other
questions <- answers <- character(nitems)
options <- matrix("", nitems, 5)
spacing <- floor(d - min(d)) + 1  #easier items have more variation

for (i in 1:nitems) {
  if (i < 50) {
    # addition
    n1 <- sample(1:100, 1)
    n2 <- sample(101:200, 1)
    ans <- n1 + n2
    questions[i] <- paste0(n1, " + ", n2, " = ?")
  } else {
    # multiplication
    m1 <- sample(1:50, 1)
    m2 <- sample(1:50, 1)
    ans <- m1 * m2
    questions[i] <- paste0(m1, " * ", m2, " = ?")
  }
  answers[i] <- as.character(ans)
  ch <- ans + sample(c(-5:-1, 1:5) * spacing[i, ], 5)
  ch[sample(1:5, 1)] <- ans
  options[i, ] <- as.character(ch)
}


# load list of items and their answers
df <- data.frame(Question = questions, Option = options, Answer = answers, Type = "radio")

set.seed(1)
pat <- generate_pattern(mo = mod, Theta = c(-3, 3), df = df)
head(pat)



# standard MCAT
# res <- mirtCAT(df = df, mo = mod, criteria = "Drule", local_pattern = pat)

# custom. Often useful to set up a browser first for easier editing
customNextItem <- function(design, person, test){
  browser()
  
}

#res <- mirtCAT(df = df, mo = mod, local_pattern = pat,
#               design = list(customNextItem=customNextItem))

customNextItem <- function(design, person, test){
  block1 <- 1:50
  block2 <- 51:100
  total_answered <- sum(!is.na(extract.mirtCAT(person, 'items_answered')))
  if(total_answered < 20){ #first 20 items block1
    block <- block1
  } else if(total_answered < 40){ #next 20 block2
    block <- block2
  } else return(NA) # terminate when both item blocks have 20 items answered
  ret <- findNextItem(person=person, design=design, test=test, 
                      subset=block, criteria = 'Arule')
  ret
}

res <- mirtCAT(df = df, mo = mod, local_pattern = pat,
               design = list(customNextItem=customNextItem,
                             min_SEM = 0)) #disable other termination criteria


print(res$items_answered[1:20])


print(res$items_answered[21:40])


plot(res)

title <- "Example Test"
authors <- "I. M. D. Author"
firstpage <- list(h2("Example Test"), h5("Please answer each item to the best of your ability. ",        
                                         "The results of this test will remain completely anonymous ", 
                                         "and are only used for research purposes."))
lastpage <- function(person){
  list(h2("Thank you for completing the test."), 
       h4('Your final ability estimates are:'),
       h4(sprintf("Ability one: %.3f, SE = %.3f", person$thetas[1],
                  person$thetas_SE_history[nrow(person$thetas_SE_history), 1])),
       h4(sprintf("Ability two: %.3f, SE = %.3f", person$thetas[2],
                  person$thetas_SE_history[nrow(person$thetas_SE_history), 2])),
       h3("Please click 'Next' to close the application."))
}
demographics <- list(textInput(inputId = "occupation", label = "What is your occupation?",
                               value = ""), selectInput(inputId = "gender", label = "Please select your gender.",
                                                        choices = c("", "Male", "Female", "Other"), selected = ""))
shinyGUI_list <- list(title = title, authors = authors, demographics = demographics,
                      demographics_inputIDs = c("occupation", "gender"), firstpage = firstpage, lastpage = lastpage)

# run the customized GUI interface
results <- mirtCAT(df = df, mo = mod, criteria = "Drule", start_item = "DPrule",
                   shinyGUI = shinyGUI_list, design = list(customNextItem=customNextItem,
                                                           min_SEM = 0.5, max_items = 10))
